---
title: Installing Pivotal Cloud Foundry&reg; IPSec Add-On
owner: Security Engineering
---

<strong><%= modified_date %></strong>

This topic describes how to prepare your network for IPsec, create an IPsec manifest, and add IPsec to your deployment. 
##<a id="prereqs"></a>Prerequisites

Make sure that you have the following: 

* AWS or vSphere as your IaaS 

* PCF operator admin rights

* BOSH deployed through Ops Manager 1.7 or higher

<p class="note"><strong>IMPORTANT!</strong> You must install the IPsec add-on before installing any other tiles to enable
 the IPsec functionality. Pivotal recommends installing IPsec immediately after Ops Manager, and before installing the 
Elastic Runtime tile, to enable IPsec for all subsequent installations. </p>

<p class="note"><strong>Note:</strong> For IPsec, Pivotal recommends any Ubuntu stemcells for vSphere and HVM stemcells for
 AWS. If you are using PV stemcells, see Preventing Packet Loss in the Troubleshooting topic to adjust MTU values.</p>

##<a id="config-network"></a>Configure Network Security

###<a id="aws"></a>AWS

1. Navigate to the security group with the description “PCF VMs Security Group”.

2. Set up the following **Inbound Rules**:

<table border="1" class="nice">
<tr>
  <th>Type</th>
  <th>Protocol</th>
  <th>Port Range</th>
  <th>Source</th>
</tr>
<tr>
  <td>Custom Protocol</td>
  <td>AH (51)</td>
  <td>All</td>
  <td>0.0.0.0/0</td>
</tr>
<tr>
  <td>Custom Protocol</td>
  <td>ESP (50)</td>
  <td>All</td>
  <td>0.0.0.0/0</td>
</tr>
<tr>
  <td>Custom UDP Rule</td>
  <td>UDP(17)</td>
  <td>500</td>
  <td>0.0.0.0/0</td>
</tr>
</table>

###<a id="vsphere"></a>vSphere

* Confirm that your network allows protocols 50 and 51 and UDP on port 500.

##<a id="create-mfest"></a>Create the IPsec manifest

1. Download the sample IPsec manifest `ipsec-addon.yml` from \< location of sample file TBD >.

2. Configure the IPsec manifest file:
 * <code>releases: - version:</code> Specify the version number of your IPsec download from Pivotal Network. 
 * <code>jobs: - name:</code> Do not change the name of this job. It must be `ipsec`. 
 * <code>ipsec\_subnets:</code> List the subnets that you want to be encrypted. This might be the entire deployment, or a portion of the network in your deployment. Encrypt any network over which business-sensitive data passes.
 * <code>no\_ipsec\_subnets:</code> List the IP addresses of your BOSH director and your network gateway. Also list any other IPs within your ipsec\_subnet that you want to communicate in the clear.
 * <code>instance\_certificate:</code> Paste in the signed certificate for use by all your instance VMs. You must use one of the CAs in the ca\_certificates property to sign this certificate. 
 * <code>instance\_private\_key:</code> Paste in the private key that corresponds to the instance\_certificate above. 
 * <code>ca\_certificates:</code> Paste in CA certificates for the instance VM to trust during the validation process. In general, you only need one CA certificate, the one used to sign the instance certificate. However, during CA credential rotation, you need two CA certificates.  
 * <code>prestart\_timeout:</code> You can optionally modify the 30 second default value that sets the number of seconds for IPsec to successfully start before failing.

<pre>
releases:
- {name: ipsec, <strong>version</strong>: 8.10.0}

addons:
- name: ipsec-addon
  jobs:
  - <strong>name</strong>: ipsec
    release: ipsec
  properties:
    ipsec:
      <strong>ipsec_subnets</strong>:
      - 10.0.1.1/20
      <strong>no_ipsec_subnets</strong>:
      - 10.0.1.1/32   # gateway
      - 10.0.1.10/32  # bosh director
      <strong>instance_certificate</strong>: |
        -----BEGIN CERTIFICATE-----
        MIIEMDCCAhigAwIBAgIRAIvrBY2TttU/LeRhO+V1t0YwDQYJKoZIhvcNAQELBQAw
        ...
        -----END CERTIFICATE-----
      <strong>instance_private_key</strong>: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEogIBAAKCAQEAtAkBjrzr5x9g0aWgyDEmLd7m9u/ZzpK7UScfANLaN7JiNz3c
        ...
        -----END RSA PRIVATE KEY-----
      <strong>ca_certificates</strong>:
      - |
        -----BEGIN CERTIFICATE-----
        MIIFCTCCAvGgAwIBAgIBATANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDEwl0ZXN0
        ...
        -----END CERTIFICATE-----
      - |
        -----BEGIN CERTIFICATE-----
        MIIFCTCCAvGgAwIBAgIBATAAYDVQQDEwl0ZXN0NBgkqhkiG9w0BAQsFADAUMRIwE
        ...
        -----END CERTIFICATE-----
 <strong>prestart_timeout</strong>: 30
</pre> 

<p class="note"><strong>Note:</strong> The ipsec manifest might need to be updated when applying changes that result in changes to network subnets.</p>

##<a id="download-deploy"></a>Download and Deploy the IPsec add-on  

1. Download the IPsec add-on software binary from The Pivotal Network to your local machine. [Add url and screenshot here. ]

2. Copy the software binary to your Ops Manager instance, for example,
`$ scp -i PATH/TO/PRIVATE/KEY ipsec-release.tar.gz ubuntu@YOUR_OPS_MANAGER_DIRECTOR_IP:`

3. Copy the IPsec manifest file to your Ops Manager instance, for example,
<pre>$ scp -i PATH/TO/PRIVATE/KEY ipsec-addon.yml ubuntu@YOUR_OPS_MANAGER_DIRECTOR_IP:</pre>

4. From a command line, SSH into Ops Manager <br>
 `$ ssh -i PATH/TO/PRIVATE/KEY ubuntu@YOUR_OPS_MANAGER_DIRECTOR_IP`

5. CD to the software binary location in your working directory.

6. Target your Ops Manager instance with BOSH: [There are outstanding questions on this step. Maybe YOUR\_OPS\_MANAGER\_IP is the correct target.]
<pre>
bosh target YOUR\_OPS\_MANAGER\_DIRECTOR\_IP
Target set to 'Ops Manager'
Your username: director
Enter password: \*\*\*\*\*
Logged in as 'director'
</pre> 

7. Run `bosh upload release PATH_TO_BINARY/BINARY_NAME.tar`

8. Optionally, confirm that the IPsec software binary has been uploaded: 
`$ bosh releases`
 You should see the IPsec binary file.  
 [Add screenshot.]

9. Run `bosh update runtime-config PATH/ipsec-addon.yml`
 [There are outstanding questions on this step.]

10. Run `bosh runtime-config` 

11. Navigate to your Installation Dashboard in Ops Manager.
 <p class="note"><strong>Note:</strong> The following step cannot be undone. After you deploy IPsec, you cannot roll it back. </p>


12. Click **Apply Changes**.

##<a id="verify"></a>Verify Your IPsec Installation

1. Run `monit summary` and confirm that your ipsec job is listed as a bosh job:
 [Add code snippet.]

2. Run `LONGPATH/ipsec statusall`
<pre>
root@0d2655a4-fe6d-4597-8828-27faea7b381b:/var/vcap/bosh\_ssh/bosh\_3yr05zp24# /var/vcap/packages/strongswan-5.3.5/sbin/ipsec statusall
Status of IKE charon daemon (strongSwan 5.3.5, Linux 3.19.0-56-generic, x86\_64):
  uptime: 18 hours, since Mar 16 23:58:50 2016
  malloc: sbrk 2314240, mmap 0, used 1182400, free 1131840
  worker threads: 11 of 16 idle, 5/0/0/0 working, job queue: 0/0/0/0, scheduled: 206
  loaded plugins: charon aes sha1 sha2 random nonce x509 revocation constraints pubkey pkcs1 pkcs7 pkcs8 pkcs12 pem gmp xcbc cmac hmac attr kernel-netlink socket-default stroke
Listening IP addresses:
  10.10.5.66
Connections:
ipsec-10.10.4.0/24:  %any...%any  IKEv1/2
ipsec-10.10.4.0/24:   local:  [CN=test-cert-1-ca-1] uses public key authentication
ipsec-10.10.4.0/24:    cert:  "CN=test-cert-1-ca-1"
ipsec-10.10.4.0/24:   remote: uses public key authentication
ipsec-10.10.4.0/24:   child:  10.10.5.66/32 === 10.10.4.0/24 TRANSPORT
ipsec-10.10.5.0/24:   child:  10.10.5.66/32 === 10.10.5.0/24 TRANSPORT
ipsec-10.10.6.0/24:   child:  10.10.5.66/32 === 10.10.6.0/24 TRANSPORT
ipsec-10.10.7.0/24:   child:  10.10.5.66/32 === 10.10.7.0/24 TRANSPORT
ipsec-10.10.8.0/24:   child:  10.10.5.66/32 === 10.10.8.0/24 TRANSPORT
ipsec-10.10.9.0/24:   child:  10.10.5.66/32 === 10.10.9.0/24 TRANSPORT
no-ipsec-10.10.4.1/32:  %any...%any  IKEv1/2
no-ipsec-10.10.4.1/32:   local:  uses public key authentication
no-ipsec-10.10.4.1/32:   remote: uses public key authentication
no-ipsec-10.10.4.1/32:   child:  dynamic === 10.10.4.1/32 PASS
no-ipsec-10.10.5.1/32:   child:  dynamic === 10.10.5.1/32 PASS
no-ipsec-10.10.6.1/32:   child:  dynamic === 10.10.6.1/32 PASS
Shunted Connections:
no-ipsec-10.10.4.1/32:  dynamic === 10.10.4.1/32 PASS
no-ipsec-10.10.5.1/32:  dynamic === 10.10.5.1/32 PASS
no-ipsec-10.10.6.1/32:  dynamic === 10.10.6.1/32 PASS
Routed Connections:
ipsec-10.10.9.0/24{6}:  ROUTED, TRANSPORT, reqid 6
ipsec-10.10.9.0/24{6}:   10.10.5.66/32 === 10.10.9.0/24
ipsec-10.10.8.0/24{5}:  ROUTED, TRANSPORT, reqid 5
ipsec-10.10.8.0/24{5}:   10.10.5.66/32 === 10.10.8.0/24
ipsec-10.10.7.0/24{4}:  ROUTED, TRANSPORT, reqid 4
ipsec-10.10.7.0/24{4}:   10.10.5.66/32 === 10.10.7.0/24
ipsec-10.10.6.0/24{3}:  ROUTED, TRANSPORT, reqid 3
ipsec-10.10.6.0/24{3}:   10.10.5.66/32 === 10.10.6.0/24
ipsec-10.10.5.0/24{2}:  ROUTED, TRANSPORT, reqid 2
ipsec-10.10.5.0/24{2}:   10.10.5.66/32 === 10.10.5.0/24
ipsec-10.10.4.0/24{1}:  ROUTED, TRANSPORT, reqid 1
ipsec-10.10.4.0/24{1}:   10.10.5.66/32 === 10.10.4.0/24
Security Associations (45 up, 0 connecting):
ipsec-10.10.4.0/24[459]: ESTABLISHED 13 seconds ago, 10.10.5.66[CN=test-cert-1-ca-1]...10.10.4.38[CN=test-cert-1-ca-1]
ipsec-10.10.4.0/24[459]: IKEv2 SPIs: ada7e6b079e7ab6e\_i 858b9d64a8940ea4\_r*, public key reauthentication in 2 hours
ipsec-10.10.4.0/24[459]: IKE proposal: AES\_CBC\_128/HMAC\_SHA1\_96/PRF\_HMAC\_SHA1/MODP\_2048
ipsec-10.10.4.0/24{1527}:  INSTALLED, TRANSPORT, reqid 1, ESP SPIs: cf9978d1\_i c6ce241c\_o
ipsec-10.10.4.0/24{1527}:  AES\_GCM\_16\_128, 2902 bytes\_i (21 pkts, 0s ago), 2966 bytes\_o (24 pkts, 0s ago), rekeying in 43 minutes
ipsec-10.10.4.0/24{1527}:   10.10.5.66/32 === 10.10.4.38/32
...



